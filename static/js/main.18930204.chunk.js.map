{"version":3,"sources":["api/api.ts","components/TodoForm/TodoForm.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["loadData","url","fetch","then","response","ok","json","Promise","reject","Error","loadUsers","userId","TodoForm","props","onHandleChange","filteredQuery","selectedQuery","className","htmlFor","type","name","id","placeholder","value","onChange","TodoList","state","handleChange","event","target","setState","getFilteredTodos","todos","query","toLowerCase","filteredTodos","filter","todo","title","includes","completed","this","onUsersId","filtredTodos","map","classNames","checked","readOnly","onClick","React","Component","CurrentUser","user","errorMessage","getLoadedData","prevProps","a","e","message","onClearUserId","email","phone","App","selectedUserId","setUsersId","clearUserId","getLoadedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18930204.chunk.js","sourcesContent":["const API_URL = 'https://mate.academy/students-api/';\n\nexport const loadData = (url: string) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Failed to load data'));\n    });\n};\n\nexport const loadTodos = () => loadData('/todos');\nexport const loadUsers = (userId: number) => loadData(`/users/${userId}`);\n","import React from 'react';\n\ntype Props = {\n  onHandleChange: (event: InputOrSelect) => void;\n  filteredQuery: string;\n  selectedQuery: string;\n};\n\nexport const TodoForm: React.FC<Props> = (props) => {\n  const { onHandleChange, filteredQuery, selectedQuery } = props;\n\n  return (\n    <div className=\"TodoList__form\">\n      <label className=\"TodoList__label\" htmlFor=\"filterTitle\">\n        <input\n          type=\"text\"\n          name=\"filteredQuery\"\n          id=\"filterTitle\"\n          className=\"form-control\"\n          placeholder=\"find title\"\n          value={filteredQuery}\n          onChange={onHandleChange}\n        />\n      </label>\n\n      <label className=\"TodoList__label\" htmlFor=\"selectedTodo\">\n        <select\n          name=\"selectedQuery\"\n          id=\"selectedTodo\"\n          value={selectedQuery}\n          className=\"form-control\"\n          onChange={onHandleChange}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </label>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { TodoForm } from '../TodoForm';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  onUsersId: (userId: number) => void;\n};\n\ntype State = {\n  filteredQuery: string,\n  selectedQuery: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    filteredQuery: '',\n    selectedQuery: '',\n  };\n\n  handleChange = (event: InputOrSelect) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value } as Pick<State, keyof State>);\n  };\n\n  getFilteredTodos = () => {\n    const { todos } = this.props;\n    const query = this.state.filteredQuery.toLowerCase();\n    const filteredTodos = todos\n      .filter(todo => todo.title.toLowerCase().includes(query));\n\n    switch (this.state.selectedQuery) {\n      case 'all':\n        return filteredTodos;\n\n      case 'active':\n        return filteredTodos\n          .filter(todo => !todo.completed);\n\n      case 'completed':\n        return filteredTodos\n          .filter(todo => todo.completed);\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  render() {\n    const { filteredQuery, selectedQuery } = this.state;\n    const { onUsersId } = this.props;\n    const filtredTodos = this.getFilteredTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <TodoForm\n          onHandleChange={this.handleChange}\n          filteredQuery={filteredQuery}\n          selectedQuery={selectedQuery}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filtredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                  onClick={() => onUsersId(todo.userId)}\n                >\n                  {`User:${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { loadUsers } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype State = {\n  user: User | null,\n  errorMessage: string,\n};\n\ntype Props = {\n  userId: number,\n  onClearUserId: () => void,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    this.getLoadedData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getLoadedData();\n    }\n  }\n\n  async getLoadedData() {\n    try {\n      const { userId } = this.props;\n      const user = await loadUsers(userId);\n\n      this.setState(() => ({ user, errorMessage: '' }));\n    } catch (error) {\n      const e = error as Error;\n\n      this.setState({ errorMessage: e.message });\n    }\n  }\n\n  render() {\n    const { user, errorMessage } = this.state;\n    const { onClearUserId } = this.props;\n\n    if (!user) {\n      return (\n        <div>\n          {errorMessage}\n        </div>\n      );\n    }\n\n    return (\n      <>\n        {!errorMessage ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              className=\"TodoList__user-button--selected button\"\n              onClick={() => onClearUserId()}\n            >\n              Clear\n            </button>\n          </div>\n        ) : errorMessage}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { loadTodos } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport './App.scss';\nimport './styles/general.scss';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  errorMessage: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    this.getLoadedTodos();\n  }\n\n  async getLoadedTodos() {\n    try {\n      const todos: Todo[] = await loadTodos();\n\n      this.setState({ todos, errorMessage: '' });\n    } catch (error) {\n      const e = error as Error;\n\n      this.setState({ errorMessage: e.message });\n    }\n  }\n\n  setUsersId = (userId: number) => {\n    this.setState(() => ({ selectedUserId: userId }));\n  };\n\n  clearUserId = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos, errorMessage } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {!errorMessage ? (\n            <TodoList\n              todos={todos}\n              onUsersId={this.setUsersId}\n            />\n          ) : errorMessage}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClearUserId={this.clearUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}