{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["loadData","url","fetch","then","response","ok","json","Promise","reject","Error","loadUsers","userId","TodoList","state","filteredQuery","selectedQuery","handleChange","event","target","name","value","setState","getFilteredTodos","todos","props","query","toLowerCase","filter","todo","completed","title","includes","this","onUsersId","filtredTodos","className","htmlFor","type","id","placeholder","onChange","map","classNames","checked","readOnly","onClick","React","Component","CurrentUser","user","errorMessage","getLoadedData","prevProps","a","onClearUserId","email","phone","App","selectedUserId","getUsersId","clearUserId","getLoadedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e36f8bf.chunk.js","sourcesContent":["const API_URL = 'https://mate.academy/students-api/';\n\nexport const loadData = (url: string) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Failed to load data'));\n    });\n};\n\nexport const loadTodos = () => loadData('/todos');\nexport const loadUsers = (userId: number) => loadData(`/users/${userId}`);\n","import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  onUsersId: (userId: number) => void;\n};\n\ntype State = {\n  filteredQuery: string,\n  selectedQuery: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    filteredQuery: '',\n    selectedQuery: '',\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    if (name === 'filterQuery') {\n      this.setState({ filteredQuery: value, selectedQuery: 'Choose todo' });\n    }\n\n    if (name === 'selectedQuery') {\n      this.setState({ filteredQuery: '', selectedQuery: value });\n    }\n  };\n\n  getFilteredTodos = () => {\n    const { todos } = this.props;\n    const query = this.state.filteredQuery.toLowerCase();\n\n    switch (this.state.selectedQuery) {\n      case 'all':\n        return todos;\n\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n\n      default:\n        return todos\n          .filter((todo: Todo) => (\n            todo.title && todo.title.toLowerCase().includes(query)\n          ));\n    }\n  };\n\n  render() {\n    const { filteredQuery, selectedQuery } = this.state;\n    const { onUsersId } = this.props;\n    const filtredTodos = this.getFilteredTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__form\">\n          <label className=\"TodoList__label\" htmlFor=\"filterTitle\">\n            <input\n              type=\"text\"\n              name=\"filterQuery\"\n              id=\"filterTitle\"\n              className=\"form-control\"\n              placeholder=\"find title\"\n              value={filteredQuery}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"TodoList__label\" htmlFor=\"selectedTodo\">\n            <select\n              name=\"selectedQuery\"\n              id=\"selectedTodo\"\n              value={selectedQuery}\n              className=\"form-control\"\n              onChange={this.handleChange}\n            >\n              <option value=\"Choose todo\">Choose todo</option>\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </label>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filtredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                  onClick={() => onUsersId(todo.userId)}\n                >\n                  {`User:${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { loadUsers } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype State = {\n  user: User | null,\n  errorMessage: string,\n};\n\ntype Props = {\n  userId: number,\n  onClearUserId: () => void,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    this.getLoadedData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getLoadedData();\n    }\n  }\n\n  async getLoadedData() {\n    try {\n      const { userId } = this.props;\n      const user = await loadUsers(userId);\n\n      this.setState(() => ({\n        user, errorMessage: '',\n      }));\n    } catch (error) {\n      this.setState({ errorMessage: 'There is no such user' });\n    }\n  }\n\n  render() {\n    const { user, errorMessage } = this.state;\n    const { onClearUserId } = this.props;\n\n    if (!user) {\n      throw new Error('Unable to load data Check your connection');\n    }\n\n    return (\n      <>\n        {!errorMessage ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              className=\"TodoList__user-button--selected button\"\n              onClick={() => onClearUserId()}\n            >\n              Clear\n            </button>\n          </div>\n        ) : errorMessage}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { loadTodos } from './api/api';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  errorMessage: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    this.getLoadedTodos();\n  }\n\n  async getLoadedTodos() {\n    try {\n      const todos: Todo[] = await loadTodos();\n\n      this.setState({ todos, errorMessage: '' });\n    } catch (error) {\n      this.setState({ errorMessage: 'Can\\'t load todos' });\n    }\n  }\n\n  getUsersId = (userId: number) => {\n    this.setState(() => ({ selectedUserId: userId }));\n  };\n\n  clearUserId = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos, errorMessage } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {!errorMessage ? (\n            <TodoList\n              todos={todos}\n              onUsersId={this.getUsersId}\n            />\n          ) : errorMessage}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClearUserId={this.clearUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}